syntax = "proto3";
package user;
import "google/protobuf/empty.proto";
import "grpc_example_common/protos/common/api.proto";
import "grpc_example_common/protos/common/p2p_validate.proto";


// create user
message CreateUserRequest {
  string uid = 1 [
    (p2p_validate.rules).string.miss_default = true, // Define generated fields without default values
    (p2p_validate.rules).string.example = "10086",  // An example value that defines the generated field is 10086
    (p2p_validate.rules).string.title = "UID",  // Define the Title of the generated field Open API as U Id
    (p2p_validate.rules).string.description = "user union id"  // Define the description of the generated field
  ];
  string user_name = 2 [
    (p2p_validate.rules).string.description = "user name",
    (p2p_validate.rules).string.min_length = 1, // Define the minimum length of the field
    (p2p_validate.rules).string.max_length = 10, // Define the maximum length of the field
    (p2p_validate.rules).string.example = "so1n"
  ];
  string password = 3 [
    (p2p_validate.rules).string.description = "user password",
    (p2p_validate.rules).string.alias = "pw",  // Define an alias for the field
    (p2p_validate.rules).string.min_length = 6,
    (p2p_validate.rules).string.max_length = 18,
    (p2p_validate.rules).string.example = "123456",
    // Defines the type of the field, which is derived from `pydantic`
    // REFER TO https://pydantic-docs.helpmanual.io/usage/types/#secret-types
    (p2p_validate.rules).string.pydantic_type = "SecretStr"
  ];
}

// delete user
message DeleteUserRequest {
  string uid = 1 [
    (p2p_validate.rules).string.example = "10086",
    (p2p_validate.rules).string.title = "UID",
    (p2p_validate.rules).string.description = "user union id"
  ];
}

// login user
message LoginUserRequest {
  string uid = 1 [
    (p2p_validate.rules).string.example = "10086",
    (p2p_validate.rules).string.title = "UID",
    (p2p_validate.rules).string.description = "user union id"
  ];
  string password = 3 [
    (p2p_validate.rules).string.description = "user password",
    (p2p_validate.rules).string.alias = "pw",
    (p2p_validate.rules).string.min_length = 6,
    (p2p_validate.rules).string.max_length = 18,
    (p2p_validate.rules).string.example = "123456"
  ];
}
message LoginUserResult {
  string uid = 1 [
    (p2p_validate.rules).string.example = "10086",
    (p2p_validate.rules).string.title = "UID",
    (p2p_validate.rules).string.description = "user union id"
  ];
  string user_name = 2 [
    (p2p_validate.rules).string.description = "user name",
    (p2p_validate.rules).string.min_length = 1,
    (p2p_validate.rules).string.max_length = 10,
    (p2p_validate.rules).string.example = "so1n"
  ];
  string token = 3 [(p2p_validate.rules).string.description = "user token"];
}

// logout user
message LogoutUserRequest {
  string uid = 1 [
    (p2p_validate.rules).string.example = "10086",
    (p2p_validate.rules).string.title = "UID",
    (p2p_validate.rules).string.description = "user union id"
  ];
  string token = 2 [
    (p2p_validate.rules).string.description = "user token",
    (p2p_validate.rules).string.enable = false // Define not to map this value to the model
  ];
}

// check login
message GetUidByTokenRequest {
  string token = 1 [(p2p_validate.rules).string.description = "user token"];
}
// check login
message GetUidByTokenResult {
  string uid = 1 [
    (p2p_validate.rules).string.example = "10086",
    (p2p_validate.rules).string.title = "UID",
    (p2p_validate.rules).string.description = "user union id"
  ];
}

service User {
  rpc get_uid_by_token (GetUidByTokenRequest) returns (GetUidByTokenResult) {
    option (pait.api.http) = {
      // Define Pait to not resolve the function, so that Pait will not map to the interface route for the function
      not_enable: true,
    };
  };
  rpc logout_user (LogoutUserRequest) returns (google.protobuf.Empty) {
    option (pait.api.http) = {
      summary: "User exit from the system",  // An introduction to defining the interface corresponding to the function
      // The url of the interface corresponding to the url definition function is "/user/logout".
      // If it is not defined, it will be automatically bound to `/User/logout_user` by `Pait`
      // any represents the specific HTTP method defined by the Grpc Gateway method.
      // If you want to specify the HTTP method as DELETE, you need to replace any with delete
      any: {url: "/user/logout"},
      // Define the Open API label corresponding to the function interface
      tag: [{name: "grpc-user", desc: "grpc_user_service"}, {name: "user-action", desc: "User Operating Interface"}],

      // Map a new interface for this function.
      // The interface only has the following properties that are different, and the rest of the functions are the same.
      // After all, the `logout_user` function of the User service does not implement the function of deleting users
      additional_bindings: {
        desc: "This interface performs a logical delete, not a physical delete",
        summary: "Like delete_user",
        delete: {url: "/user/logout"},
        tag: [
          {name: "grpc-user", desc: "grpc_user_service"},
          {name: "grpc-user-system", desc: "grpc_user_service"}
        ]
      }
    };
  };
  // The following interface performs the same transformation
  rpc login_user(LoginUserRequest) returns (LoginUserResult) {
    option (pait.api.http) = {
      summary: "User login to system",
      any: {url: "/user/login"},
      tag: [{name: "grpc-user", desc: "grpc_user_service"}, {name: "user-action", desc: "User Operating Interface"}]
    };
  };
  rpc create_user(CreateUserRequest) returns (google.protobuf.Empty) {
    option (pait.api.http) = {
      summary: "Create users through the system",
      any: {url: "/user/create"},
      tag: [
        {name: "grpc-user", desc: "grpc_user_service"},
        {name: "grpc-user-system", desc: "grpc_user_service"}
      ]
    };
  };
  rpc delete_user(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (pait.api.http) = {
      desc: "This interface performs a logical delete, not a physical delete",
      any: {url: "/user/delete"},
      tag: [
        {name: "grpc-user", desc: "grpc_user_service"},
        {name: "grpc-user-system", desc: "grpc_user_service"}
      ]
    };
  };
}
