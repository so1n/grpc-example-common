[tool.poetry]
name = "grpc_example_common"
version = "0.1.3"
description = ""
authors = ["so1n <qaz6803609@163.com>"]
readme = "./README.md"
repository = "https://github.com/so1n/grpc-example-common"
homepage = "https://github.com/so1n/grpc-example-common"


[tool.poetry.dependencies]
python = "^3.8"
grpcio = "^1.43.0"
grpcio-tools = "^1.43.0"
grpc-stubs = "^1.24.8"

[tool.poetry.dev-dependencies]
black = "^21.6b0"
mypy = "^0.910"
pytest = "^6.2.4"
isort = "^5.9.1"
pytest-mock = "^3.6.1"
coverage = "^5.5"
mypy-protobuf = "^2.5"
grpcio-testing = "^1.38.1"
pytest-grpc = "^0.8.0"
pre-commit = "^2.14.0"
flake8 = "^3.9.2"
autoflake = "^1.4"

[tool.black]
line-length = 120
target-version = ['py38']

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_glob = "grpc_handler/protos"

[tool.pytest]
testpaths = "tests"

[tool.coverage.run]
branch = true
source = ["."]
omit = [
    ".venv/*",  "venv/*",
    "tests/*",
    "grpc_example_common/*",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # type hints
    "if TYPE_CHECKING:",
    "pass",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
